# .github/workflows/build-native-image.yml

name: Build Native Images from Release JAR

# 触发条件：当一个新的 Release 被 'published' 时触发。
# 'created' 或 'edited' 不会触发，只有在你点击 "Publish release" 按钮后才会运行。
on:
  release:
    types: [published]

jobs:
  build-native:
    # 定义构建矩阵，针对不同的操作系统并行构建
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # 指定运行器（Runner）的操作系统
    runs-on: ${{ matrix.os }}

    # 定义作业的步骤
    steps:
      # 步骤 1: 检出代码
      # 虽然我们不从源码构建，但某些 action 可能需要仓库的上下文。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 GraalVM 环境
      # 使用 graalvm/setup-graalvm action 来安装指定版本的 GraalVM。
      # '21' 代表 Java 21, 你可以根据你的 JAR 包需求修改。
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24'
          distribution: 'graalvm'
          # 安装 native-image 组件
          components: 'native-image'
      
      # 步骤 3: 从 Release 下载 JAR 文件
      # 我们使用 GitHub CLI (gh)，它在所有 GitHub-hosted runner 上都预装了。
      # 它会自动从触发本次工作流的 Release 中查找并下载 .jar 文件。
      # --pattern '*.jar' 确保只下载 JAR 文件。
      - name: Download JAR from Release (win)
        if: matrix.os == 'windows-latest' 
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download ${{ github.event.release.tag_name }}
          $jarFile = (Get-ChildItem -Path . -Depth 0 -Filter '*.jar' | Select-Object -First 1).FullName
          echo "JAR_FILE=$jarFile" | Add-Content -Path $env:GITHUB_ENV
          $argFile = (Get-ChildItem -Path . -Depth 0 -Filter 'native-image.args' | Select-Object -First 1).FullName
          echo "ARG_FILE=$argFile" | Add-Content -Path $env:GITHUB_ENV
      
      - name: Download JAR from Release (linux/macos)
        if: matrix.os != 'windows-latest' 
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download ${{ github.event.release.tag_name }}
          echo "JAR_FILE=$(find . -maxdepth 1 -name '*.jar' | head -n 1)" >> $GITHUB_ENV
          echo "ARG_FILE=$(find . -maxdepth 1 -name 'native-image.args' | head -n 1)" >> $GITHUB_ENV
      
      # 步骤 4: 构建 Native Image
      # 使用下载的 JAR 文件来构建原生可执行文件。
      - name: Build Native Image
        if: matrix.os != 'ubuntu-latest' 
        run: |
          echo "Building native image from ${{ env.JAR_FILE }}..."
          native-image @${{ env.ARG_FILE }} -jar ${{ env.JAR_FILE }}
          echo "Build completed."

      - name: Build Native Image With Docker
        if: matrix.os == 'ubuntu-latest' 
        run: |
          echo "--- Starting Docker container for build ---"
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* && \
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-* && \
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ env.JAVA_HOME }}:/graalvm \
            centos:7 \
            /bin/bash -c " \
              echo '--- Inside Container: Installing dependencies ---'; \
              yum install -y zlib-devel && \
              echo '--- Inside Container: Starting native-image build ---'; \
              cd /workspace && \
              /graalvm/bin/native-image \
                @${{ env.ARG_FILE }} \
                -jar ${{ env.JAR_FILE }} && \
              echo '--- Inside Container: Correcting file permissions ---'; \
              chown -R $(id -u):$(id -g) . \
            "


      # 步骤 5: 确定输出文件名
      # 根据操作系统为可执行文件和最终的资产命名。
      - name: Determine Output Filename (win)
        if: matrix.os == 'windows-latest' 
        run: |
          # 从 JAR 文件完整路径中提取不带扩展名的基本名称 (e.g., "myapp-1.0")
          $jarBasename = [System.IO.Path]::GetFileNameWithoutExtension($env:JAR_FILE)

          $assetName = "$jarBasename-windows"
          $executableName = "$jarBasename.exe"

          # 使用 PowerShell 的方式将输出变量写入 $env:GITHUB_ENV 文件
          echo "asset_name=$assetName" | Add-Content -Path $env:GITHUB_ENV
          echo "executable_path=$executableName" | Add-Content -Path $env:GITHUB_ENV

          # 在日志中打印最终结果以供验证
          Write-Host "Final asset name: $assetName"
          Write-Host "Executable path: $executableName"
      
      # 步骤 5: 确定输出文件名
      # 根据操作系统为可执行文件和最终的资产命名。
      - name: Determine Output Filename (linux/macos)
        if: matrix.os != 'windows-latest' 
        run: |
          JAR_BASENAME=$(basename "${{ env.JAR_FILE }}" .jar)
          OS_NAME="${{ runner.os }}"
          EXECUTABLE_NAME="$JAR_BASENAME"

          echo "asset_name=${JAR_BASENAME}-${OS_NAME}" >> $GITHUB_ENV
          echo "executable_path=${EXECUTABLE_NAME}" >> $GITHUB_ENV

          echo "Final asset name: ${JAR_BASENAME}-${OS_NAME}"
          echo "Executable path: ${EXECUTABLE_NAME}"
          
      # 步骤 6: 上传构建好的原生可执行文件到 Release
      # 使用 actions/upload-release-asset action 将文件上传回触发工作流的 Release。
      - name: Upload Native Executable to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.asset_name }}
          path: ./${{ env.executable_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}